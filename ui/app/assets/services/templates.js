define(function() {

  return {
    getAll: function() {
      return [{"id":"9cd20140-a92f-4ac0-b7ee-9df2f06c35e8","name":"hello-scala","title":"Hello Scala!","timestamp":1379640240,"description":"Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way.  This very simple Scala application will get you started building and testing standalone Scala apps.  This app uses Scala 2.10 and ScalaTest.","featured":true,"tags":["basics","scala","starter"]},{"id":"9c1cf031-b180-4306-9b4a-a77a2306331f","name":"hello-akka","title":"Hello Akka!","timestamp":1383736456,"description":"Akka is a toolkit and runtime for building highly concurrent, distributed, and fault tolerant event-driven apps.  This simple application will get you started building Actor based systems in Java and Scala.  This app uses Akka 2.2, Java 6, Scala 2.10, JUnit, and ScalaTest.","featured":true,"tags":["basics","akka","java","scala","starter"]},{"id":"4bf624b2-f655-4e96-b984-41692e8748d8","name":"hello-slick","title":"Hello Slick!","timestamp":1379290299,"description":"Slick is Typesafe's modern database query and access library for Scala. It allows you to work with stored data almost as if you were using Scala collections while at the same time giving you full control over when a database access happens and which data is transferred. You can also use SQL directly.  This tutorial will get you started with a simple standalone Scala application that uses Slick.","featured":true,"tags":["basics","slick","starter"]},{"id":"c99e6f61-e143-4232-935c-b1ad15082e28","name":"reactive-stocks","title":"Reactive Stocks","timestamp":1383762070,"description":"The Reactive Stocks application uses Java, Scala, Play Framework, and Akka to illustrate a reactive app.  The tutorial in this example will teach you the reactive basics including Reactive Composition and Reactive Push.","featured":true,"tags":["sample","java","scala","play","akka","reactive"]},{"id":"0a7c3127-6050-48e6-9737-8027a55963a1","name":"hello-play","title":"Hello Play Framework!","timestamp":1384698022,"description":"Play Framework is the High Velocity Web Framework for Java and Scala.  Play is based on a lightweight, stateless, web-friendly architecture.  Built on Akka, Play provides predictable and minimal resource comsumption (CPU, memory, threads) for highly-scalable applications.  This app will teach you how to start building Play 2.1 apps with Java and Scala.","featured":true,"tags":["basics","play","java","scala","starter"]},{"id":"0ec4dc60-79d4-41cf-a115-467e1e404364","name":"akka-supervision","title":"Akka Supervision (Scala)","timestamp":1379435926,"description":"Illustrates supervision in Akka","featured":false,"tags":["basics","akka","starter"]},{"id":"2d184ae9-d007-4448-9218-10ebf63d6f8b","name":"activator-akka-spray","title":"Akka and Spray","timestamp":1386502268,"description":"Builds simple Actor-based REST server. Demonstrates the usage of Spray to build the RESTful API layer; as well as general structure of such REST actor-based applications. Includes tests for the API layer.","featured":false,"tags":["akka","spray","rest"]},{"id":"f79ec754-114a-4798-99e5-348fa50fb9b8","name":"angular-seed-play","title":"The Play Angular Seed Project","timestamp":1376423904,"description":"This is a Play version of the official angular-seed project (https://github.com/angular/angular-seed). The project uses Play's requirejs support for WebJars (http://www.webjars.org/).","featured":false,"tags":["angular","angular-seed","play","javascript","js","webjars","requirejs","meta-template"]},{"id":"dfdaf42c-3a72-4d1e-a527-f16c6554f38d","name":"test-patterns-scala","title":"Test Patterns in Scala!","timestamp":1383629406,"description":"Scala is a great language to test applications, integrations, services, and more. This app gives simple and intermediate examples of how to get started.","featured":false,"tags":["basics","scala","starter","testing"]},{"id":"bd59baab-0df4-45dc-959f-b9d0feca0890","name":"akka-java-spring","title":"Akka Java Spring","timestamp":1379435995,"description":"Illustrates how to Inject dependencies into Akka actors using Spring in Java","featured":false,"tags":["basics","akka","java","spring","starter"]},{"id":"93388e0c-0c4f-42be-9808-77beb99b7296","name":"akka-distributed-workers","title":"Distributed workers with Akka and Scala!","timestamp":1383060774,"description":"Illustrates a pattern for distributed workers using Akka cluster features.","featured":false,"tags":["sample","akka","scala"]},{"id":"78e8dde0-ff30-417a-a0ec-4e3bf9236f96","name":"spray-actor-per-request","title":"Actor per-request model with spray","timestamp":1386350806,"description":"Example spray RESTful API using the actor per request model","featured":false,"tags":["akka","spray","rest"]},{"id":"0b0fa62a-52e2-412c-97ba-74d318a13718","name":"scalikejdbc-activator-template","title":"Hello ScalikeJDBC!","timestamp":1385883977,"description":"Just write SQL and get things done! ScalikeJDBC is A tidy SQL-based DB access library for Scala developers. This library naturally wraps JDBC APIs and provides you easy-to-use APIs. This template is built with ScalikeJDBC, Play2, Backbone.js and CoffeeScript.","featured":false,"tags":["scala","database","backbonejs","coffeescript"]},{"id":"158bcbe1-0b5a-4c34-bad2-1fb312b0753e","name":"play-cake","title":"Play Cake Pattern (Scala)","timestamp":1385795776,"description":"Illustrates Cake pattern with tests in Play Framework","featured":false,"tags":["cake","pattern","starter"]},{"id":"9bf8c712-b6d3-4728-ab5d-b36bcf38205b","name":"play-guice","title":"Play with Guice","timestamp":1370015813,"description":"This is a Play example that uses Google Guice (https://code.google.com/p/google-guice/) for runtime dependency injection.","featured":false,"tags":["play","guice","dependency-injection","injection"]},{"id":"9886a7ba-1a83-4b29-aefc-09deae67f330","name":"akka-scala-spring","title":"Akka Scala Spring","timestamp":1378597759,"description":"Illustrates how to Inject dependencies into Akka actors using Spring-Scala","featured":false,"tags":["basics","akka","scala","spring","starter"]},{"id":"0e3da5c6-b055-4027-a6c2-9a15d5dcc0bf","name":"activator-scalding","title":"Activator Scalding","timestamp":1387303679,"description":"The Activator Scalding (Local Mode) application uses Twitter's Scalding API, running in \"local mode\" or on a Hadoop cluster, to perform powerful analytics on data sets with a concise, intuitive Scala-based API.","featured":false,"tags":["sample","scala","scalding","reactive"]},{"id":"577f8e7b-91eb-488a-bff9-c33e71fbeb35","name":"play-java-spring","title":"Play + Java + Spring","timestamp":1385408450,"description":"This template is an easy way to get started with Play Framework, Java, and Spring.","featured":false,"tags":["basics","play","java","spring"]},{"id":"10ea848c-2d4b-4c4d-a6ad-8cb1c45e29fc","name":"akka-clustering","title":"Akka Clustered PubSub with Scala!","timestamp":1383060687,"description":"Illustrates publish-subscribe in a cluster of Akka nodes.","featured":false,"tags":["basics","akka","starter"]},{"id":"b8b33bf9-f43d-4829-a654-ee21b3947888","name":"hello-scaloid","title":"Hello Scaloid!","timestamp":1379976104,"description":"Scaloid makes your Android code easy to understand and maintain.  This very simple Scaloid application will get you started building and testing standalone Android apps.  This app uses Scala 2.10.2.","featured":false,"tags":["basics","scaloid","starter"]},{"id":"f5090104-091e-48f7-8bb1-518fd7f2d8dc","name":"matthiasn-sse-chat-template","title":"SSE Chat Template with AngularJS","timestamp":1381329703,"description":"A template for a simple chat application using Server Sent Events.","featured":false,"tags":["sse","server-sent-event","chat","angularjs","spa","single-page-application"]},{"id":"b9337042-c0b3-4e59-8f1e-36fcb8513076","name":"realtime-search","title":"Reactive Real-time Search","timestamp":1375891053,"description":"A reactive Play!, Akka and AngularJS application using Elasticsearch to demonstrate real-time log entry search","featured":false,"tags":["reactive","play","akka","angularjs","elasticsearch"]},{"id":"f34ade51-2243-4de7-a416-de4979a9c080","name":"play-scalatest-subcut","title":"Play Framework using Scalatest for testing and SubCut for configuration","timestamp":1380315742,"description":"A sample play application with testing in Scalatest, and dependency configuration using SubCut which offers the ease of guice but with a completely Scala accent.","featured":false,"tags":["basics","playframework","subcut","scalatest","scala","dependencyinjection"]},{"id":"53b8f6c1-16af-4783-89e4-59d80339be8a","name":"play-yeoman","title":"Play (Scala) with play-yeoman","timestamp":1381824851,"description":"Play application with play-yeoman plugin. Can be used as base for any web applications. Provides ability to use yo, bower and grunt commands on the sbt command line. More details here - https://github.com/tuplejump/play-yeoman","featured":false,"tags":["basics","play","scala","starter","yeoman","angular"]},{"id":"34f9f8e6-137f-4476-bcd6-76a47aead899","name":"play-mongo-knockout","title":"Play Reactive Mongo application with KnockoutJS frontend","timestamp":1379308107,"description":"Play Framework is the High Velocity Web Framework for Java and Scala.  Play is based on a lightweight, stateless, web-friendly architecture.  Built on Akka, Play provides predictable and minimal resource comsumption (CPU, memory, threads) for highly-scalable applications.  This app will teach you how to start building Play 2.1 apps with Java and Scala.","featured":false,"tags":["play","scala","mongo","knockout","bootstrap"]},{"id":"cc02c26f-1eea-4180-84a8-6cd469df1bd1","name":"six-minute-apps","title":"6 Minute Apps!","timestamp":1375884548,"description":"The completed application for James Ward's OSCON Workshop, 6 Minute Apps! Build Your First Modern Web App: http://www.jamesward.com/2013/07/17/oscon-workshop-6-minute-apps-build-your-first-modern-web-app","featured":false,"tags":["example","playframework","scala","coffeescript","jquery"]},{"id":"4a924fdf-2c93-45a8-9dfe-2d868caaaf20","name":"hello-scala-eclipse","title":"Hello Scala!","timestamp":1387399874,"description":"Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way.  This very simple Scala application will get you started building and testing standalone Scala apps.  This app uses Scala 2.10 an updated ScalaTest, and the sbt-eclipse plug-in.","featured":false,"tags":["basics","scala","starter"]},{"id":"52853081-f7a4-44e8-9ad8-5d6fb4b3c433","name":"play-akka-angular-websocket","title":"Play Akka Angular WebSocket","timestamp":1380205314,"description":"Illustrates how to create a WebSocket based application using Play in Scala,using Akka for manage WebSockets and AngularJS for update the view with data received from sockets.","featured":false,"tags":["play","akka","angular","websocket"]},{"id":"52f7ae62-945d-4f1d-b029-a8b75e86a3b1","name":"atomic-scala-examples","title":"Atomic Scala Examples","timestamp":1379113915,"description":"Code examples for Atomic Scala.","featured":false,"tags":["scala"]},{"id":"2f4a7a0b-7f35-4d7a-8e85-e51afa3fad34","name":"activator-akka-cassandra","title":"Akka and Cassandra","timestamp":1381852105,"description":"This tutorial shows how to use Cassandra in an Akka application. It starts with the core concepts, then introduces the typeclasses pattern. Additionally, it focuses on write performance and concurrent writes to Cassandra.","featured":false,"tags":["akka","cassandra"]},{"id":"4ddcef5b-b321-490a-a2fe-708abdd751b5","name":"play-slick","title":"Super Slick Play","timestamp":1380141542,"description":"Slick (the Scala Language-Integrated Connection Kit) is a framework for type safe, composable data access in Scala.  This template combines Play Framework with Slick for quick start Slick integrated database-backed web application development.","featured":false,"tags":["basics","play","java","scala","starter","slick"]},{"id":"ef332331-3458-42a8-90a8-54e587fc3063","name":"hello-play-scala","title":"Hello Play Framework (Scala Only)","timestamp":1385047649,"description":"Play Framework is the High Velocity Web Framework for Java and Scala.  Play is based on a lightweight, stateless, web-friendly architecture.  Built on Akka, Play provides predictable and minimal resource comsumption (CPU, memory, threads) for highly-scalable applications.  This app will teach you how to start building Play 2.1 apps with Scala.","featured":false,"tags":["basics","play","scala","starter"]},{"id":"0e1d8c20-2722-425a-88d5-d687391e5de1","name":"dart-akka-spray","title":"Dart + Akka + Spray","timestamp":1386788477,"description":"A starter template for a Spray/Akka server with a Dart front end","featured":false,"tags":["spray","akka","dart"]},{"id":"f101da49-5cbe-4796-bf68-a1e4f77b4abe","name":"play-spring-data-jpa","title":"Play with Spring Data Jpa","timestamp":1380303426,"description":"This is a Play example that uses Spring Data Jpa (http://www.springsource.org/spring-data/jpa).","featured":false,"tags":["play","spring","data","jpa","dependency-injection","injection"]},{"id":"809f6e2c-f443-4096-9ccd-18cfd14eace1","name":"macwire-activator","title":"No-framework Dependency Injection with MacWire and Play Activator","timestamp":1382094241,"description":"This activator explains what Dependency Injection is and shows how to do DI in a Play application, with the help from a small library, MacWire. But without any additional frameworks! You will see how to divide the wiring of your classes into modules using traits, as well as how to use Scala Macros to remove some boilerplate code.","featured":false,"tags":["basics","play","scala","dependency-injection","injection","macros"]},{"id":"cf0a088f-d458-4ac7-a23a-2195bab0d6aa","name":"scaldi-play-example","title":"Scaldi Play Example","timestamp":1384039788,"description":"Scaldi is lightweight Scala dependency injection library. In this project you will find an example of Play 2 application that uses Scaldi for dependency injection.","featured":false,"tags":["scaldi","play","scala","dependency-injection","basics"]},{"id":"11bc7a19-fdd2-4225-9156-c8d2bee46f44","name":"hello-play-java","title":"Hello Play Framework (Java Only)","timestamp":1383661908,"description":"Play Framework is the High Velocity Web Framework for Java and Scala.  Play is based on a lightweight, stateless, web-friendly architecture.  Built on Akka, Play provides predictable and minimal resource comsumption (CPU, memory, threads) for highly-scalable applications.  This app will teach you how to start building Play 2.1 apps with Java.","featured":false,"tags":["basics","play","java","starter"]},{"id":"80fa4f2d-c0a0-432a-9ba6-e6cd6a47f863","name":"play-slick-advanced","title":"Play Slick with Typesafe IDs","timestamp":1386973125,"description":"Slick (the Scala Language-Integrated Connection Kit) is a framework for type safe, composable data access in Scala. This template combines Play Framework with Slick and adds tools to use type-safe IDs for your classes so you can no longer join on bad id field or mess up order of fields in mappings. It also provides way to create service with methods (like querying all, querying by id, saving or deleting), for all classes with such IDs in just 4 lines of code.","featured":false,"tags":["advanced","play","scala","slick"]},{"id":"efe5b043-16e9-42fd-9cee-3784e04a64c3","name":"play-with-angular-requirejs","title":"Play Framework with AngularJS and RequireJS","timestamp":1377976942,"description":"A sample application for Play Framework, AngularJS, and RequireJS","featured":false,"tags":["playframework","angularjs","scala"]},{"id":"6f3173be-ce21-4c59-bec3-7613cb8716da","name":"scala-phantom-types","title":"A little phantom type sample","timestamp":1380399134,"description":"Phantom types can be useful to move some runtime errors into the compile time. This small and slightly contrived example demonstrates one way that they might be used.","featured":false,"tags":["basics","phantom","scala","compiler","types"]},{"id":"aba481e3-c4e5-4b4d-9ddf-1146ef56e8b5","name":"activator-spray-twitter","title":"Akka IO with Spray Client","timestamp":1386503405,"description":"Shows how to use the streaming Twitter API using Akka IO and Spray Client. It implements all the required code to use the Twitter's streaming APIs without any further libraries.","featured":false,"tags":["akka","spray","akka-io"]},{"id":"148fc4a0-928a-42a0-81c8-98d83d1a656d","name":"play-hbase","title":"Play Framework + HBase","timestamp":1379354175,"description":"This template is an easy way to get started with Play Framework and HBase.","featured":false,"tags":["starter","play","java","hbase"]},{"id":"917a0c14-d3a2-473e-9422-aee6b092b23e","name":"activator-play-autosource-reactivemongo","title":"ReactiveMongo Play Autosource","timestamp":1373993571,"description":"A template for ReactiveMongo Play Autosource - Automatic CRUD/REST Datasource.","featured":false,"tags":["meta-template"]},{"id":"229275d1-5472-4ea6-82c4-fbd86105297e","name":"tcp-async","title":"Akka IO over TCP, Spray and MySQL Reactive","timestamp":1380100077,"description":"Illustrates a reactive application which uses Akka IO for TCP connections, Spray-client for making non-blocking API calls and postgresql/mysql-async for reactive SQL operations.","featured":false,"tags":["scala","akka","spray","spray-can","spray-client","mysql-async","postgresql-mysql-async"]},{"id":"e6a65cfd-6bf2-4b5a-b006-6967f87dceff","name":"akka-distributed-workers-java","title":"Distributed workers with Akka and Java!","timestamp":1380642207,"description":"Illustrates a pattern for distributed workers using Akka cluster features.","featured":false,"tags":["sample","akka","java"]}];
    },

    recentApps: function() {
      return [1, 2, 3, 4];
    },

    getTags: function() {
      return ["reactive", "scala", "java", "starter", "akka", "play", "slick", "spray", "angular", "javascript", "database", "websocket"];
    },

    createApp: function(path, template) {},

    importApp: function(path) {}

  }
});
