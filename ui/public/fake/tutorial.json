{
  "metaData": {
    "name": "Tutorial Name",
    "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras vitae lorem at neque mollis viverra eu eu tortor. Vivamus at viverra risus. Quisque scelerisque felis purus, a tempor elit vulputate tempor. Sed pharetra condimentum elementum. Aliquam lobortis, metus ut luctus commodo, neque justo cursus diam, eu semper augue dui a erat. Praesent eget augue dignissim, aliquet erat lobortis, feugiat dui.",
    "source": "http://github.com/johndoe/activator-akka-spray",
    "author": {
      "name": "John Does",
      "twitter": "johndoe"
    },
    "partner": {
      "url": "http://partner.com",
      "logo": "http://dommkopfq6m1m.cloudfront.net/assets/1387589794721/images/partners/svcs/chariot.png",
      "summary": "Maecenas lorem arcu, tristique ut accumsan ac, ultricies non nulla. Pellentesque adipiscing venenatis risus at faucibus. In vehicula fermentum enim et placerat."
    }
  },
  "html": "<html>\n<head>\n  <title>Frame - Activator Template<\/title>\n<\/head>\n<body>\n\n<div>\n  <h2>Config, Guice, Akka and Spray<\/h2>\n\n  <p>\n    Presents a light framework for building reactive REST services in a modular,\n    testable fashion using Typesafe Config, Guice, Akka and Spray.\n  <\/p>\n\n  <p>\n    This tutorial will demonstrate:\n  <ul>\n    <li>\n      How to use dependency injection to simplify and modularize code (and tame implicits)\n    <\/li>\n    <li>\n      How to inject configuration properties to avoid boilerplate configuration code\n    <\/li>\n    <li>\n      Clear, concise patterns for implementing reactive, end-to-end REST services using Spray\n    <\/li>\n    <li>\n      How to combine these techniques to provide a simple, complete, scalable structure for\n      building REST server applications\n    <\/li>\n  <\/ul>\n  <\/p>\n<\/div>\n<div>\n  <h2>The Example - A World Climate API<\/h2>\n  <p>\n    We'll explore a simple but complete example -\n    A REST API that provides model-based climate data by country.\n  <\/p>\n  <p>\n    Here are the key components:\n    <ul>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateService.scala\" class=\"shortcut\">ClimateService<\/a>\n        provides world climate data by time period and country\n      <\/li>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/wbclimate\/WbClimateClient.scala\" class=\"shortcut\">WbClimateClient<\/a>\n        is used by the ClimateService implementation to access the\n        <a href=\"http:\/\/data.worldbank.org\/developers\/climate-data-api\">World Bank Climate API<\/a>\n      <\/li>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateApi.scala\" class=\"shortcut\">ClimateAPI<\/a>\n        exposes the ClimateService results as a REST API\n      <\/li>\n    <\/ul>\n  <\/p>\n<\/div>\n<div>\n  <h2>Dependency Injection<\/h2>\n  <p>\n    Dependency injection (DI) provides a concise way to wire applications together.\n    It removes the need for <code><b>new<\/b><\/code> and factories (both of which\n    tend to complicate code and interfere with modularity).\n  <\/p>\n  <p>\n    When using a DI system, each implementation class can simply declare its dependencies\n    in its constructor and rely on the system to provide them on instantiation.\n  <\/p>\n  <p>\n    The <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateService.scala\" class=\"shortcut\">ClimateServiceImpl<\/a>\n    class provides a simple example. It declares two dependencies:\n  <ul>\n    <li>\n      A <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/wbclimate\/WbClimateClient.scala\">WbClimateClient<\/a>\n      used to access World Bank climate data\n    <\/li>\n    <li>\n      An implicit\n      <a href=\"http:\/\/www.scala-lang.org\/files\/archive\/nightly\/docs\/library\/index.html#scala.concurrent.ExecutionContext\">ExecutionContext<\/a>\n      used to execute futures\n    <\/li>\n  <\/ul>\n  The DI system will provide both of these automatically when it instantiates the service.\n  <\/p>\n  <p>\n    Noticed the ugly <code>@Inject()<\/code> annotation?  Guice (and JSR 330) requires this to\n    mark all constructors that are candidates for injection.\n  <\/p>\n<\/div>\n<div>\n  <h2>Configuration Injection<\/h2>\n  <p>\n    An implementation may also require configuration, and we can use DI for this too.\n  <\/p>\n  <p>\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/wbclimate\/WbClimateClient.scala\" class=\"shortcut\">WbClimateClientImpl<\/a>\n    provides an example.\n    It declares an <code>endpoint<\/code> constructor parameter\n    <pre><code>@Named(\"wbclient.endpoint\") endpoint: String<\/code><\/pre>\n    used to access the World Bank API.\n  <\/p>\n  <p>\n    This annotation tells the DI system that the value should be read from the \"wbclient.endpoint\"\n    configuration property (defined in\n    <a href=\"#code\/conf\/application.conf\" class=\"shortcut\">application.conf<\/a>)\n  <\/p>\n  <p>\n    The\n    <a href=\"https:\/\/code.google.com\/p\/google-guice\/wiki\/BindingAnnotations#@Named\">@Named<\/a>\n    annotation is a Guice\/JSR330 way to qualify a dependency that cannot be identified by\n    its type alone.\n  <\/p>\n  <p>\n    <h3>Behind the scene<\/h3>\n    During DI system initialization, we load a special\n    <a href=\"#code\/src\/main\/scala\/sandbox\/frame\/config\/ConfigModule.scala\" class=\"shortcut\">ConfigModule<\/a>\n    that reads the typesafe configuration and binds each property value to a <code>@Named(\"[config-key]\")<\/code>\n    annotation. This makes all config properties available for injection.\n  <\/p>\n<\/div>\n<div>\n  <h2>Modules and Bindings<\/h2>\n  <p>\n    The complete application is composed of a set of modules.  Each module defines a logical\n    subsystem and contains all necessary implementation bindings.\n  <\/p>\n  <p>\n    The program entry point\n    <a href=\"#code\/src\/main\/scala\/sandbox\/Main.scala\" class=\"shortcut\">Main<\/a>\n    wires the application by installing\n    <a href=\"#code\/src\/main\/scala\/sandbox\/MainModule.scala\" class=\"shortcut\">MainModule<\/a>.\n    This module, in turn, installs all of the sub-modules required to run the server:\n    <ul>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/frame\/config\/ConfigModule.scala\" class=\"shortcut\">ConfigModule<\/a>\n        loads the Typesafe configuration and creates a @Named binding for every configuration property\n      <\/li>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/frame\/akka\/AkkaModule.scala\" class=\"shortcut\">AkkaModule<\/a>\n        initializes the Akka system and wires Akka to use Guice for actor instantiation.  This module also\n        binds the AkkaRefFactory and ExecutionContext so they're available for injection to all services that\n        use Akka and Futures.\n      <\/li>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/app\/ServicesModule.scala\" class=\"shortcut\">ServicesModule<\/a>\n        binds all application services\n      <\/li>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/frame\/spray\/SprayModule.scala\" class=\"shortcut\">SprayModule<\/a>\n        enables an Http Server and creates the actor to handle requests\n      <\/li>\n      <li>\n        <a href=\"#code\/src\/main\/scala\/sandbox\/app\/ApisModule.scala\" class=\"shortcut\">ApisModule<\/a>\n        registers all REST APIs\n      <\/li>\n    <\/ul>\n  <\/p>\n<\/div>\n<div>\n  <h2>Implementing the REST API<\/h2>\n  <p>\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateApi.scala\" class=\"shortcut\">ClimateApi<\/a>\n    implements our example REST API.  It defines <b>GET climate<\/b> which retrieves climate data by\n    region and period.  Here's an example:\n<pre><code>\ncurl 'localhost:9080\/climate?location=FJI&fromYear=1980&toYear=1999'\n# returns\n{\"location\": \"FJI\" \"fromYear\": 1980, \"toYear\": 1999,\n  \"precipitation\": { \"annual\": 2166.58, \"unit\": \"Centimeters\" },\n  \"temperature\":   { \"annual\": 24.78, \"unit\": \"Celsius\" }\n}\n<\/code><\/pre>\n  <\/p>\n  <p>\n    The <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateApi.scala\">implementation<\/a>\n    uses the <a href=\"http:\/\/spray.io\/documentation\/1.2.1\/spray-routing\/\">Spray Routing DSL<\/a>\n    to declare the resource, method and parameters, and delegates the real work to\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateService.scala\">ClimateService<\/a>\n    in the complete block:\n<pre><code>\ncomplete {\n  climateService.query(location, from, to)\n}\n<\/code><\/pre>\n    The  <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateService.scala\">query<\/a>\n    call returns a Future[ClimateStats].  The complete directive, in effect, defines a\n    completion handler for this future.  When the ClimateStats result is available,\n    it's marshalled to JSON and sent back in a response.\n  <\/p>\n  <p>\n    So though the code reads sequentially, it is actually executed in an\n    asynchronous pipeline.\n  <\/p>\n<\/div>\n<div>\n  <h2>Implementing ClimateService<\/h2>\n  <p>\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateService.scala\" class=\"shortcut\">ClimateServiceImpl<\/a>\n    implements the ClimateService which provides a single <code>query<\/code>\n    method that returns climate data by location and time.\n  <\/p>\n  <p>\n    The <code>query<\/code> implementation must make two remote requests to\n    the World Bank Climate API (using WbClimateClient) to obtain precipitation\n    data and temperature data.  It then combines this data in a single\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/model\/ClimateStats.scala\">ClimateStats<\/a>\n    result.\n  <\/p>\n  <p>\n    As with the API implementation, it appears sequential but is actually asynchronous.\n<pre><code>\n(for {\n  temp <- wbClient.fetchTemperatureStats(location, from, to)\n  rain <- wbClient.fetchPrecipitationStats(location, from, to)\n} yield {\n  ClimateStats.fromData(location, from, to, temp, rain)\n})\n<\/code><\/pre>\n    The <code>wbClient<\/code> calls both return Future[WbClimateData].\n    The <a href=\"http:\/\/doc.akka.io\/docs\/akka\/snapshot\/scala\/futures.html#For_Comprehensions\">for<\/a>\n    comprehension combines these to create a Future[ClimateStats]\n    result.\n  <\/p>\n  <p>\n    Take a look at\n    <a href=\"http:\/\/doc.akka.io\/docs\/akka\/snapshot\/scala\/futures.html#Functional_Futures\">Funcitonal Futures<\/a>\n    to learn more about how map and for comprehensions\n    can be used to combine Futures.\n  <\/p>\n<\/div>\n<div>\n  <h2>Implementing an Async API Client<\/h2>\n  <p>\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/wbclimate\/WbClimateClient.scala\" class=\"shortcut\">WbClimateClientImpl<\/a>\n    implements the async http client for the World Bank Climate API using:\n    <ul>\n      <li>\n        <a href=\"http:\/\/spray.io\/documentation\/1.2.1\/spray-client\/\">Spray Client<\/a>\n        to handle async HTTP\n      <\/li>\n      <li>\n        <a href=\"http:\/\/json4s.org\/\">Json4s<\/a>\n        to handle json unmarshalling\n      <\/li>\n    <\/ul>\n  <\/p>\n  <p>\n    Let's take a look at\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/wbclimate\/WbClimateClient.scala\" class=\"shortcut\">fetchTemperatureStats<\/a>\n    to see how things fit together.\n  <\/p>\n  <p>\n    This method builds the request and than calls <code>pipeline(Get(uri))<\/code>\n    to push it into an asynchronous processing pipeline.\n  <\/p>\n  <p>\n    The pipeline defines the stages for http processing:\n<pre><code>\nval pipeline: HttpRequest => Future[Seq[WbClimateData]] =\n  sendReceive ~>\n    unmarshal[Seq[WbClimateData]]\n<\/code><\/pre>\n  <\/p>\n  <p>\n    The <code>sendReceive<\/code> stage sends the request\n    (using <a href=\"http:\/\/doc.akka.io\/docs\/akka\/snapshot\/scala\/io.html\">Akka IO<\/a>)\n    and processes the response on completion.\n  <\/p>\n  <p>\n    The <code>unmarshal<\/code> stage deserializes the response into Seq[WbClimateData] when\n    it's ready.  We enable Json4s to handle unmashalling by mixing in\n    <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/wbclimate\/WbClimateData.scala\" class=\"shortcut\">WbClimateData.JsonProtocol<\/a>.\n  <\/p>\n  <p>\n    The pipeline returns the future result for the request.\n  <\/p>\n<\/div>\n<div>\n  <h2>Unit Testing the API<\/h2>\n  <p>\n    <a href=\"#code\/src\/test\/scala\/sandbox\/app\/climate\/ClimateApiSpec\" class=\"shortcut\">ClimateApiSpec<\/a>\n    defines the unit test for <a href=\"#code\/src\/main\/scala\/sandbox\/app\/climate\/ClimateApi\" class=\"shortcut\">ClimateApi<\/a>.\n  <\/p>\n  <p>\n    It uses the spray testkit and the Mokito mocking framework to run an isolated\n    test against ClimateApi.  Rather than use dependency injection in this case,\n    we instantiate the ClimateApi directly and pass in a mock service for it to run\n    against.\n  <\/p>\n  <p>\n    This test is structured so we can reuse it for running an integration test which\n    we'll explore in next.\n  <\/p>\n<\/div>\n\n<div>\n  <h2>Integration Testing<\/h2>\n  <p>\n    <a href=\"#code\/src\/test\/scala\/sandbox\/app\/climate\/ClimateApiIntegSpec\" class=\"shortcut\">ClimateApiIntegSpec<\/a>\n    extends the unit test to run against a real service.\n  <\/p>\n  <p>\n    Instead of creating route with ClimateApi and a mock ClientService, it uses\n    the getAppRouteInstance defined in <a href=\"#code\/src\/test\/scala\/sandbox\/IntegTestSupport\" class=\"shortcut\">IntegTestSupport<\/a>\n  <\/p>\n  <p>\n    This returns a route that is implemented as the real application, which has been\n    constructed using the DI framework.\n  <\/p>\n  <p>\n    You can run this test using \"sbt integ:test\"\n  <\/p>\n<\/div>\n<\/body>\n<\/html>"
}